<.live_component module={WandererAppWeb.MapLoader} id="map-loader" />

<div class="w-full h-full" id="mapper" phx-hook="Mapper" phx-update="ignore"></div>

<div class="absolute top-0 mt-2 left-16 flex gap-1">
  <.live_component
    :if={not is_nil(assigns |> Map.get(:map_slug))}
    module={WandererAppWeb.MapPicker}
    id="map-picker"
    notify_to={self()}
    current_user={@current_user}
    map_slug={@map_slug}
    event_name="change_map"
  />

  <.button
    phx-click="show_activity"
    class="btn-link -mt-1 text-gray-400 hover:text-white"
    title="Show Character Activity"
  >
    <.icon name="hero-chart-bar-solid" class="w-6 h-6" />
  </.button>

  <.link
    :if={(@user_permissions || %{}) |> Map.get(:delete_map, false)}
    id={"map-audit-#{@map_slug}"}
    class="h-8 w-8 hover:text-white"
    navigate={~p"/#{@map_slug}/audit?period=1H&activity=all"}
  >
    <.icon name="hero-key-solid" class="w-6 h-6" />
  </.link>

  <.link
    :if={(@user_permissions || %{}) |> Map.get(:delete_map, false)}
    id={"map-characters-#{@map_slug}"}
    class="h-8 w-8 hover:text-white"
    navigate={~p"/#{@map_slug}/characters"}
  >
    <.icon name="hero-user-group-solid" class="w-6 h-6" />
  </.link>
</div>

<!-- Persistent container for React component -->
<div id="character-activity-container" 
     phx-hook="CharacterActivity" 
     phx-update="ignore"
     data-activity={Jason.encode!(@character_activity || [])}
     style="display: none;"
     class="w-full h-[400px] overflow-auto border border-gray-700 rounded-lg">
</div>

<!-- Character Activity Modal -->
<%= if assigns |> Map.get(:show_activity?, false) do %>
  <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
    <div class="relative w-full max-w-4xl bg-[#1e1e2e] rounded-lg shadow-lg overflow-hidden border border-[#313244]">
      <div class="character-activity-modal-header">
        <h2>Character Activity</h2>
        <button phx-click="hide_activity" class="character-activity-modal-close" aria-label="Close">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <!-- Container for React component with continuous border -->
      <div id="character-activity-modal-container" class="w-full h-[400px] overflow-hidden">
        <div class="flex items-center justify-center h-full">
          <p class="text-gray-400">Loading character activity data...</p>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- JavaScript to handle the React component in the modal -->
<script>
  // Store activity data globally for persistence
  window.lastActivityData = null;
  
  // Listen for DOM updates from Phoenix
  document.addEventListener('phx:update', function() {
    // Check if modal is open
    const modalContainer = document.getElementById('character-activity-modal-container');
    
    if (modalContainer) {
      // Create a new React component directly in the modal container
      if (window.lastActivityData && window.React && window.ReactDOM && window.CharacterActivity) {
        try {
          const activityData = JSON.parse(window.lastActivityData);
          
          // Clear the container first
          modalContainer.innerHTML = '';
          
          // Create a new root and render the component
          const root = window.ReactDOM.createRoot(modalContainer);
          root.render(window.React.createElement(window.CharacterActivity, { activity: activityData }));
        } catch (error) {
          console.error('Error creating React component in modal:', error);
          modalContainer.innerHTML = '<div class="p-4 text-red-500">Error rendering activity data</div>';
        }
      } else {
        if (!window.lastActivityData) {
          modalContainer.innerHTML = '<div class="p-4">No activity data available</div>';
        }
      }
    }
  });
  
  // Listen for the update_activity event from the server
  window.addEventListener('phx:update_activity', function(e) {
    if (e.detail && e.detail.activity) {
      try {
        // Store the activity data for later use
        window.lastActivityData = JSON.stringify(e.detail.activity);
        
        // If the modal is open, update it immediately
        const modalContainer = document.getElementById('character-activity-modal-container');
        if (modalContainer && window.React && window.ReactDOM && window.CharacterActivity) {
          try {
            const activityData = e.detail.activity;
            
            // Clear the container first
            modalContainer.innerHTML = '';
            
            // Create a new root and render the component
            const root = window.ReactDOM.createRoot(modalContainer);
            root.render(window.React.createElement(window.CharacterActivity, { activity: activityData }));
          } catch (error) {
            console.error('Error updating React component in modal:', error);
          }
        }
      } catch (error) {
        console.error('Error handling update_activity event:', error);
      }
    }
  });
</script>

<.modal
  :if={assigns |> Map.get(:show_tracking?, false)}
  id="map-tracking-modal"
  title="Track and Follow Characters"
  show
  on_cancel={JS.push("hide_tracking")}
>
  <.async_result :let={characters} assign={@characters}>
    <:loading>
      <span class="loading loading-dots loading-xs" />
    </:loading>
    <:failed :let={reason}>
      <%= reason %>
    </:failed>

    <.table
      :if={characters}
      id="characters-tracking-table"
      class="h-[400px] !overflow-y-auto"
      rows={characters}
    >
      <:col :let={character} label="Track">
        <label class="flex items-center gap-2 justify-center">
          <input
            type="checkbox"
            class="checkbox"
            phx-click="toggle_track"
            phx-value-character-id={character.id}
            id={"character-track-#{character.id}"}
            checked={character.tracked}
          />
        </label>
      </:col>
      <:col :let={character} label="Follow">
        <label class="flex items-center gap-2 justify-center">
          <input
            type="radio"
            name="followed_character"
            class="radio"
            phx-click="toggle_follow"
            phx-value-character-id={character.id}
            checked={Map.get(character, :followed, false)}
          />
        </label>
      </:col>
      <:col :let={character} label="Character">
        <div class="flex items-center gap-3">
          <.avatar url={member_icon_url(character.eve_id)} label={character.name} />
          <div>
            <div class="font-bold">
              <%= character.name %>
              <span class="ml-1 text-gray-400">
                [<%= character.corporation_ticker %>]
              </span>
            </div>
            <div class="text-sm opacity-50"></div>
          </div>
        </div>
      </:col>
    </.table>
  </.async_result>
</.modal>
