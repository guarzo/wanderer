#!/bin/bash
# Pre-commit hook for basic quality checks
# Install: ln -sf ../../.github/hooks/pre-commit .git/hooks/pre-commit

set -e

echo "üîç Running pre-commit quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Track overall success
OVERALL_SUCCESS=true

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    print_status $RED "‚ùå Not in a git repository"
    exit 1
fi

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only)
STAGED_EX_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ex|exs)$' || true)

echo "üìã Staged files: $(echo "$STAGED_FILES" | wc -l) files"

# Skip if no Elixir files are staged
if [ -z "$STAGED_EX_FILES" ]; then
    print_status $GREEN "‚úÖ No Elixir files staged, skipping quality checks"
    exit 0
fi

# ============================================================================
# Basic Quality Checks
# ============================================================================

echo ""
print_status $YELLOW "üîç Running basic quality checks..."

# Check for merge conflict markers
CONFLICT_FILES=$(echo "$STAGED_FILES" | xargs grep -l "^<<<<<<< HEAD\|^>>>>>>> \|^=======$" 2>/dev/null || true)
if [ -n "$CONFLICT_FILES" ]; then
    print_status $RED "‚ùå Merge conflict markers found in:"
    echo "$CONFLICT_FILES"
    OVERALL_SUCCESS=false
else
    print_status $GREEN "‚úÖ No merge conflict markers found"
fi

# ============================================================================
# Elixir Quality Checks
# ============================================================================

if [ -n "$STAGED_EX_FILES" ]; then
    echo ""
    print_status $YELLOW "üîç Running Elixir quality checks..."
    
    # Check if mix is available
    if ! command_exists mix; then
        print_status $RED "‚ùå Mix not found, skipping Elixir checks"
        OVERALL_SUCCESS=false
    else
        # Format check
        print_status $YELLOW "  üìù Checking code formatting..."
        if ! mix format --check-formatted $STAGED_EX_FILES >/dev/null 2>&1; then
            print_status $RED "  ‚ùå Code formatting issues found"
            echo "  Run: mix format $STAGED_EX_FILES"
            OVERALL_SUCCESS=false
        else
            print_status $GREEN "  ‚úÖ Code formatting is correct"
        fi
        
        # Compilation check
        print_status $YELLOW "  üî® Checking compilation..."
        if ! mix compile --force --warnings-as-errors >/dev/null 2>&1; then
            print_status $RED "  ‚ùå Compilation failed or has warnings"
            echo "  Run: mix compile to see details"
            OVERALL_SUCCESS=false
        else
            print_status $GREEN "  ‚úÖ Code compiles without warnings"
        fi
    fi
fi

# ============================================================================
# Summary
# ============================================================================

echo ""
echo "==============================================="

if [ "$OVERALL_SUCCESS" = true ]; then
    print_status $GREEN "‚úÖ All pre-commit checks passed!"
    echo ""
    print_status $GREEN "üöÄ Ready to commit"
    exit 0
else
    print_status $RED "‚ùå Pre-commit checks failed!"
    echo ""
    print_status $RED "üí° Fix the issues above before committing"
    echo ""
    echo "To bypass these checks (not recommended):"
    echo "  git commit --no-verify"
    exit 1
fi